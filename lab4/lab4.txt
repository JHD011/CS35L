Amit Mondal #804746916
CS35L Project 4

Run wget http://web.cs.ucla.edu/classes/winter17/cs35L/assign/coreutils-
							with-bug.tar.gz 
to download the bugged coreutils.

Run 'tar -xzvf coreutils-with-bug.tar.gz to decompress the files.

Run 'mkdir buggedcoreutils' to create an install destination, then enter the
coreutils source folder with 'cd coreutils-with-bug'

Run './configure --prefix=/u/cs/ugrad/amit/proj4files/buggedcoreutils' as 
before, then run 'make'. Normally, you'd run 'make install' to install, but 
there's an error upon compilation: 

utimens.h:2:5: error: conflicting types for 'futimens'
int futimens (int, char const *, struct timespec const [2]);
^
In file included from utimecmp.h:25:0,
from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was 
here
extern int futimens (int __fd, const struct timespec __times[2]) __THROW;

The error involves some sort of redefinition of the futimens function.
Let's try out the patch and see if that fixes the problem. Download the diff
with 'wget http://web.cs.ucla.edu/classes/winter17/cs35L/assign/coreutils.diff'.

Apply the patch in the coreutils-with-bug folder using 'patch -p0 < 
../coreutils.diff'. It should patch 5 files.

Running 'make' and 'make' install should no longer throw any errors.

Opening the diff, it is evident that the patch fixes the problem by renaming
several conflicting functions with the prefix 'coreutils_'. For example,
'futimens' has been renamed to 'coreutils_futimens' in several files.

We can now run the bugged touch command and see the problem. Running 
'buggedcoreutils/bin/touch -d '1918-11-11 11:00 GMT' wwi-armistice', and then
running 'TZ=UTC0 buggedcoreutils/bin/ls -lt --full-time wwi-armistice' shows the
creation date as '2054-12-17'.

It's time to figure out where the problem is in the code. Opening the ls.c file
in the coreutils-with-bug/src/ directory, I searched for the '-t' option that
was causing the issue. The comments told me it corresponded to an enum option
called 'sort_time'. Searching for 'sort_time' eventually led to the
'sort_files' function, which uses 'sort_time' in a switch statement. Following
the chain of function calls, we can see that ultimately the function cmp_mtime
is called.

I ran gdb on ls with 'gdb buggedcoreutils/bin/ls', then set a breakpoint on the
cmp_mtime function with 'break cmp_mtime. I ran gdb a couple times on several
different files, and printed out the results of local variables every time
a breakpoint was hit. Running 'gdb run -lt', and printing the value of the
'diff' variable each time it appeared yielded these results:

48       int diff = a.tv_sec - b.tv_sec;
(gdb) print diff
$1 = 3
49   return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) print diff
$2 = -1613826000

48   int diff = a.tv_sec - b.tv_sec;
(gdb) print diff
$4 = 3
(gdb) s
49      return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) print diff
$5 = -1613826000

48   int diff = a.tv_sec - b.tv_sec;
(gdb) print diff
$6 = 6386224
49   return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) print diff
$6 = 1486445415

I noticed that the 'diff' variable usually had positive values, but sometimes
had large negative values, depending on the files in the directory I ran it in.
This seemed like the sort of thing that would happen because of integer
overflow or underflow, which makes sense because we can see that diff is
declared as an int. 

Running 'grep -r "int diff = a.tv_sec" . ' shows that the problematic diff
definition is in /lib/timespec.h. Before editing the file, copy it to another
directory with 'cp lib/timspec.h ../timespec.h'

Reading the comments above timespec_cmp, we can see that it compares the seconds
between two files' timestamps, and if the seconds are the same, then it compares
the nanoseconds. This allows us to substitute the buggy code with some slightly
more complicated, but fully correct code.

Here is the new function:
static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  if (a.tv_sec > b.tv_sec) return 1;
  else if (a.tv_sec < b.tv_sec) return -1;
  else return a.tv_nsec - b.tv_nsec;
}

Now we can configure, make, and install in the directory 'fixedcoreutils', and
test to see if the fix worked.

Here is the old ls -lt output:
-rw-r--r-- 1 amit csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 amit csugrad 0 2017-02-08 00:12:38.348999309 +0000 now1
-rw-r--r-- 1 amit csugrad 0 2017-02-08 00:12:37.346972496 +0000 now
And here is the new ls -lt output:
-rw-r--r-- 1 amit csugrad 0 2017-02-08 00:12:50.607327346 +0000 now1
-rw-r--r-- 1 amit csugrad 0 2017-02-08 00:12:49.605300529 +0000 now
-rw-r--r-- 1 amit csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice

You can see wwi-armistice is at the bottom, where it should be.

Now, we must make our diff of timespec.h with 'diff -u timespec.h 
coreutils-with-bug/lib/timespec.h > lab4.diff'. Now, enter the diff file, and
rename the file headers to lib/timespec.h. Create a ChangeLog file in emacs with
C-x 4 a, then copy and paste the contents at the top of the diff file.

Using the built-in touch and ls utilities, the SEASNet server seems to think
that the wwi-armistice file is from 2054, as shown:

-rw-r--r--  1 amit csugrad       0 Dec 17  2054 wwi-armistice

It seems that even the updated ls has some issues with dates that are 
very far back.


